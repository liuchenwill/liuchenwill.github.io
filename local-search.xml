<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/04/23/test/"/>
    <url>/2024/04/23/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cplus note</title>
    <link href="/2023/04/15/Cplus%20note/"/>
    <url>/2023/04/15/Cplus%20note/</url>
    
    <content type="html"><![CDATA[<h2 id="string-类函数"><a href="#string-类函数" class="headerlink" title="string 类函数"></a>string 类函数</h2><h3 id="getline-cin-s"><a href="#getline-cin-s" class="headerlink" title="getline(cin, s)"></a>getline(cin, s)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">getline</span>(cin,temp,delim);<br></code></pre></td></tr></table></figure><ul><li>cin是标准输入流函数</li><li>temp是用来存储字符的变量名</li><li>delim是结束标志</li></ul><p>在使用getline读入一整行时，如果前面使用getchar()、cin这类读入了一个字母，但是不会读入后续换行\n符号或者空格的输入时，再接getline()就容易出现问题。</p><p>这是因为输入数字之后，敲回车，产生的换行符仍然滞留在输入流，接着就被getline(cin,s)给读进去了，此时的s&#x3D;“\n”,所以实际上s只是读入了一个换行符\n。</p><p>而若是前面使用getline()，再又用getline()进行读入，此时不会发生问题。getline()中读入结束的回车后，结束符不放入缓存区，会将读入的\n直接去除，下一个输入前，缓冲区为空，并不会因为回车留下\n。</p><h3 id="反转reverse（s-begin-s-end-）"><a href="#反转reverse（s-begin-s-end-）" class="headerlink" title="反转reverse（s.begin(), s.end()）"></a>反转reverse（s.begin(), s.end()）</h3><p>reverse 是让原数据自己反转哦， 不可以返回值</p><p>string ns &#x3D; reverse（s.begin(), s.end()） ❌</p><h3 id="递归的式子-如dfs-没有返回值-一定要用-void-dfs（）"><a href="#递归的式子-如dfs-没有返回值-一定要用-void-dfs（）" class="headerlink" title="递归的式子 如dfs 没有返回值 一定要用 void dfs（）"></a>递归的式子 如dfs 没有返回值 一定要用 void dfs（）</h3><p>使用int dfs（）回报runtime error错误</p><h3 id="最大公约数-gcd-15-10-返回5"><a href="#最大公约数-gcd-15-10-返回5" class="headerlink" title="最大公约数 __gcd(15, 10)   返回5"></a>最大公约数 __gcd(15, 10)   返回5</h3><p>最小公倍数 (a*b)&#x2F;__gcd(a,b)</p><h3 id="stoi-和-atoi"><a href="#stoi-和-atoi" class="headerlink" title="stoi() 和 atoi()"></a>stoi() 和 atoi()</h3><p>这两个功能虽然都是将<strong>字符串</strong>转化为 <strong>int 类型</strong>，但是还是有区别的，<br><strong>stoi</strong> 的参数是 <strong>const string</strong>* 类型<br><strong>atoi</strong> 的参数是 <strong>const char</strong>* 类型 但是string类可以用转 atoi(s.c_str())</p><h3 id="str-c-str"><a href="#str-c-str" class="headerlink" title="str.c_str()"></a>str.c_str()</h3><p>就是将C++的string转化为C的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>数组</p><p>c_str()生成一个const char *指针，指向字符串的首地址</p><h3 id="to-string"><a href="#to-string" class="headerlink" title="to_string()"></a>to_string()</h3><p><code> cout&lt;&lt;to_string(123)+&quot;asd&quot;;</code></p><p>功能：将<strong>数字常量</strong>（int,double,long等）转换为<strong>字符串</strong>（string），返回转换好的字符串</p><h3 id="多边形面积公式"><a href="#多边形面积公式" class="headerlink" title="多边形面积公式"></a>多边形面积公式</h3><p>求多边形面积公式：S &#x3D; 0.5 * ( x(0)*y(1) - x(1)*y(0) + x(1)*y(2) - x(2)*y(1) ……x(n)*y(0) - x(1)*y(n)  )</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="int的数字-要进行浮点数运算-要带-，"><a href="#int的数字-要进行浮点数运算-要带-，" class="headerlink" title="int的数字 要进行浮点数运算 要带.，"></a>int的数字 要进行浮点数运算 要带.，</h3><p> 如2.&#x2F;3.0， 4.0</p><h3 id="很大数要使用long-long-类型"><a href="#很大数要使用long-long-类型" class="headerlink" title="很大数要使用long long 类型"></a>很大数要使用long long 类型</h3><p>莫名奇妙出错用longlong试试， 斐波那契数列数列尤其使用， 还有dp问题</p><h3 id="使用dp-记录前缀和"><a href="#使用dp-记录前缀和" class="headerlink" title="使用dp[] 记录前缀和"></a>使用dp[] 记录前缀和</h3><p>dp[b] - dp[a-1] 为区间内的值；</p><h3 id="TL的问题，试试把cin-cout-改成-scanf-和printf！！！！NB"><a href="#TL的问题，试试把cin-cout-改成-scanf-和printf！！！！NB" class="headerlink" title="TL的问题，试试把cin cout 改成 scanf 和printf！！！！NB*"></a><strong>TL</strong>的问题，试试把cin cout 改成 scanf 和printf！！！！NB*</h3><h3 id="如果函数不是void-但是不给return-会报错Runtime-Error，本地可以运行"><a href="#如果函数不是void-但是不给return-会报错Runtime-Error，本地可以运行" class="headerlink" title="如果函数不是void 但是不给return 会报错Runtime Error，本地可以运行"></a>如果函数不是void 但是不给return 会报错Runtime Error，本地可以运行</h3><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>反向取余法 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(n)&#123;<br>a[i++] = n%jin;  <br>n /= jin;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="一定要注意"><a href="#一定要注意" class="headerlink" title="一定要注意"></a>一定要注意</h1><p>使用 </p><p>longlong！</p><p>scnaf！</p><p>找规律！</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
